name: Lint and Validate helm chart

on:
  pull_request:
    paths:
      - "**/*.yaml"
      - "**/*.yml"

env:
  HELM_VERSION: "v2.16.10"

jobs:
  lint-config:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install yamllint

      - name: Unlock git-crypt secrets
        if: github.event.pull_request.head.repo.fork == false
        uses: sliteteam/github-action-git-crypt-unlock@a09ea5079c1b0e1887d4c8d7a4b20f00b5c2d06b
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      # pick yamllint config based on whether we have access to secrets or not
      - name: Select yamllint config
        run: |
          if [[ "${{ github.event.pull_request.head.repo.fork }}" == "false" ]]; then
            echo "linting secrets"
            export YAMLLINT_CONFIG=scripts/yamllint-config.yaml
          else
            echo "not linting secrets"
            export YAMLLINT_CONFIG=scripts/yamllint-no-secrets.yaml
          fi
          # persist env for the next step
          echo "YAMLLINT_CONFIG=$YAMLLINT_CONFIG" >> "$GITHUB_ENV"

      # We use --no-warnings in this step to reduce output to critical errors
      - name: Run yamllint
        run: |
          yamllint -d ${YAMLLINT_CONFIG} --no-warnings .

  lint-helm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        # versions must be available
        # at https://github.com/instrumenta/kubernetes-json-schema
        # in the form v${version}-standalone-strict
        # this does *not* include all kubernetes versions!
        - release: staging
          kube_version: "1.17.4"
        - release: prod
          kube_version: "1.17.4"
        - release: prod
          kube_version: "1.18.1"
        - release: ovh
          kube_version: "1.15.7"
        - release: turing
          kube_version: "1.18.1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install "chartpress<1.0.0"

      - name: Install helm
        run: |
          curl -L https://storage.googleapis.com/kubernetes-helm/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz | tar --directory ${HOME} --extract --gzip --file -
          sudo mv ${HOME}/linux-amd64/helm /usr/local/bin/helm

      - name: Setup helm
        run: |
          helm init --client-only
          helm dep up mybinder
          helm plugin install https://github.com/instrumenta/helm-kubeval

      - name: Unlock git-crypt secrets
        if: github.event.pull_request.head.repo.fork == false
        uses: sliteteam/github-action-git-crypt-unlock@a09ea5079c1b0e1887d4c8d7a4b20f00b5c2d06b
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: Run chartpress
        run: |
          chartpress

      - name: Select secret config
        run: |
          if [[ "${{ github.event.pull_request.head.repo.fork }}" == "false" ]]; then
            export SECRET_CONFIG="-f secrets/config/common.yaml -f secrets/config/${{ matrix.release }}.yaml"
          else
            export SECRET_CONFIG="-f config/test-secrets.yaml"
          fi
          echo "linting with secret config ${SECRET_CONFIG}"
          # persist env for the next step
          echo "SECRET_CONFIG=$SECRET_CONFIG" >> "$GITHUB_ENV"

      - name: Run helm kubeval for ${{ matrix.release }} with kube-${{ matrix.kube_version }}
        run: |
          helm kubeval \
          --kubernetes-version ${{ matrix.kube_version }} \
          --strict \
          --ignore-missing-schemas \
          -f config/${{ matrix.release }}.yaml \
          ${SECRET_CONFIG} \
          mybinder
