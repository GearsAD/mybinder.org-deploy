# Useful GitHub Actions docs:
#
# - https://help.github.com/en/actions
# - https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
# - https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow
# - https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions

name: Continuous Deployment

# Only trigger the workflow when pushing to master or a label is applied to a
# Pull Request
on:
  push:
    branches:
      - master
  pull_request:
    types: [labeled]

# Global environment variables
env:
  GCLOUD_SDK_VERION: "290.0.1"
  KUBECTL_VERSION: "v1.18.0"
  CERT_MANAGER_VERSION: "v0.15.2"
  GIT_COMMITTER_EMAIL: ci-user@github.local
  GIT_COMMITTER_NAME: CI User
  GIT_AUTHOR_EMAIL: ci-user@github.local
  GIT_AUTHOR_NAME: CI User

jobs:
  # Job to upgrade staging
  staging-deploy:
    # Only run the job if the 'test-staging' label is present OR if the event
    # is a push to master
    if: |
      (github.event.label.name == 'test-staging') ||
      ((github.event_name == 'push') &&
      (github.ref == 'refs/heads/master'))
    runs-on: ubuntu-18.04
    # Set helm version for this job
    env:
      HELM_VERSION: "v3.3.4"
    strategy:
      fail-fast: false  # Do not cancel all jobs if one fails
      matrix:
        include:
          - federation_member: staging
            binder_url: https://gke2.staging.mybinder.org
            hub_url: https://hub.gke2.staging.mybinder.org
    steps:
      # Action Repo: https://github.com/actions/checkout
      - name: "Stage 0: Checkout repo"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Action Repo: https://github.com/actions/setup-python
      - name: "Stage 0: Setup Python 3.6"
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      # Action Repo: https://github.com/actions/cache
      - name: "Stage 0: Cache pip dependencies"
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "Stage 1: Install dependencies"
        run: |
          pip install --upgrade setuptools pip
          pip install --upgrade -r requirements.txt

      # Action Repo: https://github.com/google-github-actions/setup-gcloud
      - name: "Stage 1: Install gcloud SDK"
        uses: google-github-actions/setup-gcloud@master
        with:
          version: ${{ env.GCLOUD_SDK_VERION }}

      # Action Repo: https://github.com/Azure/setup-kubectl
      - name: "Stage 1: Install kubectl"
        uses: azure/setup-kubectl@v1
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: "Stage 1: Install helm ${{ env.HELM_VERSION }}"
        run: |
          curl -L https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz | tar --directory ${HOME} --extract --gzip --file -
          sudo mv ${HOME}/linux-amd64/helm /usr/local/bin/helm

      # Action Repo: https://github.com/sliteteam/github-action-git-crypt-unlock
      - name: "Stage 2: Unlock git-crypt secrets"
        uses: sliteteam/github-action-git-crypt-unlock@a09ea5079c1b0e1887d4c8d7a4b20f00b5c2d06b
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      # Action Repo: https://github.com/Azure/docker-login
      - name: "Stage 2: Login to Docker"
        uses: azure/docker-login@v1
        with:
          login-server: "https://gcr.io"
          username: "_json_key"
          password: ${{ secrets.GCR_KEY }}

      - name: "Stage 2: Setup helm"
        working-directory: mybinder
        run: |
          helm repo add stable https://charts.helm.sh/stable
          helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm dep up

      - name: "Stage 3: Build images (if required)"
        run: |
          chartpress --push ${{ matrix.chartpress_args }}

      - name: "Stage 4: Deploy to staging"
        run: |
          python ./deploy.py ${{ matrix.federation_member }}
        env:
          TERM: xterm

      # Action Repo: https://github.com/nick-invision/retry
      - name: "Stage 4: Verify staging works"
        uses: nick-invision/retry@39da88d5f7d15a96aed861dbabbe8b7443e3182a
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: py.test -vx -n 2 --binder-url=${{ matrix.binder_url }} --hub-url=${{ matrix.hub_url }}

      - name: "Stage 5: Post message to Grafana that deployment to production has started"
        run: |
          source secrets/grafana-api-key
          export PULL_REQUEST_ID=$(git log -1 --pretty=%B | head -n1 | sed 's/^.*#\([0-9]*\).*/\1/')
          export AUTHOR_NAME="$(git log  -1 --pretty=%aN)"
          export PULL_REQUEST_TITLE="$(git log --pretty=%B -1 | tail -n+3)"
          python3 post-grafana-annotation.py  \
            --grafana-url https://grafana.mybinder.org \
            --tag deployment-start \
            "$(echo -en ${PULL_REQUEST_TITLE}\\n\\n${AUTHOR_NAME}: https://github.com/${{ github.repository }}/pull/${PULL_REQUEST_ID})" \
          || echo "failed!"

  prod-deploy:
    # Previous job must have successfully completed for this job to execute
    # - https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idneeds
    needs: staging-deploy
    # Only run job if the event is a push to master
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-18.04
    # Set helm version for this job
    env:
      HELM_VERSION: "v2.16.10"
    # - https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategy
    strategy:
      fail-fast: false  # Do not cancel all jobs if one fails
      matrix:
        include:
          - federation_member: prod
            binder_url: https://gke.mybinder.org
            hub_url: https://hub.gke.mybinder.org
            helm_version: "v2.16.10"
          - federation_member: turing
            binder_url: https://turing.mybinder.org
            hub_url: https://hub.mybinder.turing.ac.uk
            helm_version: "v3.3.4"
          - federation_member: ovh
            binder_url: https://ovh.mybinder.org
            hub_url: https://hub-binder.mybinder.ovh
            helm_version: "v3.3.4"

    steps:
      - name: "Stage 0: Checkout repo"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Stage 0: Setup Python 3.6"
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - name: "Stage 0: Cache pip dependencies"
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "Stage 1: Install dependencies"
        run: |
          pip install --upgrade setuptools pip
          pip install --upgrade -r requirements.txt

      # - https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idif
      - name: "Stage 1: Install gcloud SDK"
        if: matrix.federation_member == 'prod'
        uses: google-github-actions/setup-gcloud@master
        with:
          version: ${{ env.GCLOUD_SDK_VERION }}

      - name: "Stage 1: Install Azure CLI"
        if: matrix.federation_member == 'turing'
        run: |
          sudo apt-get update && sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg && curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg > /dev/null && AZ_REPO=$(lsb_release -cs) && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list && sudo apt-get update && sudo apt-get install azure-cli

      - name: "Stage 1: Install kubectl"
        uses: azure/setup-kubectl@v1
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: "Stage 1: Install helm ${{ env.HELM_VERSION }}"
        if: matrix.helm_version == env.HELM_VERSION
        run: |
          curl -L https://storage.googleapis.com/kubernetes-helm/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz | tar --directory ${HOME} --extract --gzip --file -
          sudo mv ${HOME}/linux-amd64/helm /usr/local/bin/helm

      - name: "Stage 1: Install helm ${{ matrix.helm_version }}"
        if: matrix.helm_version != env.HELM_VERSION
        run: |
          curl -L https://get.helm.sh/helm-${{ matrix.helm_version }}-linux-amd64.tar.gz | tar --directory ${HOME} --extract --gzip --file -
          sudo mv ${HOME}/linux-amd64/helm /usr/local/bin/helm

      - name: "Stage 2: Unlock git-crypt secrets"
        uses: sliteteam/github-action-git-crypt-unlock@a09ea5079c1b0e1887d4c8d7a4b20f00b5c2d06b
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: "Stage 2: Setup helm ${{ env.HELM_VERSION }}"
        if: matrix.helm_version == env.HELM_VERSION
        working-directory: mybinder
        run: |
          helm init --client-only
          helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm dep up

      - name: "Stage 2: Setup helm ${{ matrix.helm_version }}"
        if: matrix.helm_version != env.HELM_VERSION
        working-directory: mybinder
        run: |
          helm repo add stable https://charts.helm.sh/stable
          helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm dep up

      - name: "Stage 3: Set image tag in chart"
        run: |
          chartpress --skip-build ${{ matrix.chartpress_args }}

      - name: "Stage 4: Deploy to ${{ matrix.federation_member }}"
        run: |
          python ./deploy.py ${{ matrix.federation_member }} ${{ matrix.cluster_name || matrix.federation_member }} --name ${{ matrix.release_name || matrix.federation_member }}
        env:
          TERM: xterm

      - name: "Stage 4: Verify ${{ matrix.federation_member }} works"
        uses: nick-invision/retry@39da88d5f7d15a96aed861dbabbe8b7443e3182a
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: py.test -vx -n 2 --binder-url=${{ matrix.binder_url }} --hub-url=${{ matrix.hub_url }}
